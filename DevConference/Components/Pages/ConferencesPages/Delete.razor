@page "/conferences/delete"
@using Microsoft.EntityFrameworkCore
@using DevConference.Shared.Models.Entities
@inject IDbContextFactory<DevConferenceAPI.Data.AplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Conferences</h2>
    <hr />
    @if (conferences is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@conferences.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@conferences.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@conferences.StartDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EndDate</dt>
            <dd class="col-sm-10">@conferences.EndDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Location</dt>
            <dd class="col-sm-10">@conferences.Location</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ImageUrl</dt>
            <dd class="col-sm-10">@conferences.ImageUrl</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">WebsiteUrl</dt>
            <dd class="col-sm-10">@conferences.WebsiteUrl</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@conferences.IsActive</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ConferenceStatus</dt>
            <dd class="col-sm-10">@conferences.ConferenceStatus</dd>
        </dl>
        <EditForm method="post" Model="conferences" OnValidSubmit="DeleteConferences" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(conferences is null)">Delete</button> |
            <a href="/conferences">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Conferences? conferences;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        conferences = await context.Conferences.FirstOrDefaultAsync(m => m.Id == Id);

        if (conferences is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteConferences()
    {
        using var context = DbFactory.CreateDbContext();
        context.Conferences.Remove(conferences!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/conferences");
    }
}
